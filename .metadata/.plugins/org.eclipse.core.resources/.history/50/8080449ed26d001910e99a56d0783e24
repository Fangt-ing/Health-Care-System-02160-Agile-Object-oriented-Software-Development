package hospitalmanagementsystem;

import java.util.ArrayList;
import java.util.Objects;
import hospitalmanagementsystem.departments.*;

/**
 * 
 * @author Jack Rodman
 *
 */

public class Patient {
	// Static Variables
	private static PersistenceLayer persist = new PersistenceLayer();

	// INSTANCE VARIABLES
	String name;
	String surname;
	String patientID;
	String bday;
	String address;
	String phoneNo;
	String deceased;
	String record;
	String dept;
	String bed;

	// CONSTRUCTOR
	public Patient(String name, String surname, String bday, String address, String phoneNo) {
		//patient info input by user
		this.name = name;
		this.surname = surname;
		int idCounter = persist.loadCounter() + 1;
		this.patientID = "P" + Integer.toString(idCounter);;
		persist.saveCounter(idCounter);
		this.bday = bday;
		this.address = address;
		this.phoneNo = phoneNo;
		this.deceased = "false";
		this.record = null;
		this.dept = null;
		this.bed = null;
		
		persist.save(this, this.patientID, this.dept);
	}

	public Patient() {}
	
	/**
	 * Updates a patient's department to enable admitting or moving a patient to a new department
	 * @param department
	 * @throws IllegalArgumentException
	 */
	public void updateDepartment(Department department) throws IllegalArgumentException {
		// check if department is Management
		if( department instanceof Management) {
			throw new IllegalArgumentException("Patients can not be assigned to the Managment Department");
		} else if(this.dept == null) {
			throw new IllegalArgumentException("Can not discharge a patient who is not already admitted into any department.");
		} else if(department != null) { 
			// Delete from current department
			persist.delete(this.patientID, this.dept);
			
			// check if the patient is in a bed
			if(this.bed != null && (department.equals(Emergency.getInstance()) || department.equals(Inpatient.getInstance()))) {
				// if they are remove the patient from the bed
				ArrayList<Bed> beds = department.getBedList();
				for(Bed bed : beds) {
					if(bed.getBedID().equals(this.bed)) {
						bed.setPatient(null);
						this.bed = null;
						break;
					}
				}
			}
			// update the department
			this.dept = department.getName();
		}
		
		// Save the new Patient
		persist.save(this, this.patientID, this.dept);
	}

	// Getters
	public String getFirstName() {
		return this.name;
	}

	public String getLastName() {
		return this.surname;
	}
	
	public String getPatientID() {
		return this.patientID;
	}
	
	public String getDOB() {
		return this.bday;
	}

	public String getAddress() {
		return this.address;
	}
	
	public String getPhoneNo() {
		return this.phoneNo;
	}
	
	public String getDeceased() {
		return this.deceased;
	}
	
	public String getRecord() {
		return this.record;
	}
	
	public String getDepartment() {
		return this.dept;
	}
	
	public String getBed() {
		return this.bed;
	}

	// Setters
	public void setFirstName(String firstName) {
		this.name = firstName;
	}

	public void setLastName(String lastName) {
		this.surname = lastName;
	}

	public void setPatientID(String patientID) {
		this.patientID = patientID;
	}
	
	public void setDOB(String dOB) {
		this.bday = dOB;
		
	}
	
	public void setAddress(String newAddress) {
		this.address = newAddress;
	}
	
	public void setPhoneNo(String phone) {
		this.phoneNo = phone;
	}

	public void setDeceased(String deceased) {
		this.deceased = deceased;
	}
	
	/**
	 * Updates a patients medical record
	 * @param data
	 */
	public void setRecord(String data) {
		if(!Objects.equals(this.record,null)) {
			this.record = this.record + "\n" + data;
		} else {
			this.record = data;
		}
	}
	
	public void setDepartment(String department) {
		this.dept = department;
	}

	public void setBed(String bedID) {
		this.bed = bedID;
	}
}
